"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const search_control_1 = require("./search-control");
const request_1 = require("./request");
const popup_manager_1 = require("./popup-manager");
class MapboxPhotonGeocoder {
    constructor(searchControlOptions = {}, geocodingOptions = {}, popupOptions = {}) {
        this.searchControlOptions = searchControlOptions;
        this.geocodingOptions = geocodingOptions;
        this.popupOptions = popupOptions;
    }
    getDefaultPosition() {
        const defaultPosition = 'top-left';
        return defaultPosition;
    }
    onAdd(map) {
        this.map = map;
        this.controlContainer = document.createElement('div');
        this.controlContainer.classList.add('mapboxgl-ctrl');
        this.controlContainer.classList.add('mapboxgl-ctrl-group');
        this.searchBox = document.createElement('input');
        this.controlContainer.appendChild(this.searchBox);
        this.photonGeocoding = new request_1.PhotonGeocoding(map, this.geocodingOptions);
        this.popupManager = new popup_manager_1.default(map, this.popupOptions);
        if (!this.searchControlOptions.onSelected) {
            this.searchControlOptions.onSelected = this.onSelected.bind(this);
        }
        this.searchControlOptions.doSearch = this.photonGeocoding.geocode.bind(this.photonGeocoding);
        this.searchControl = new search_control_1.default(this.searchBox, this.searchControlOptions);
        this.searchControl.initialize();
        return this.controlContainer;
    }
    onSelected(choice) {
        this.popupManager.add(choice.feature);
    }
    onRemove() {
        if (!this.controlContainer
            || !this.controlContainer.parentNode
            || !this.map
            || !this.searchBox) {
            return;
        }
        this.controlContainer.parentNode.removeChild(this.controlContainer);
    }
}
exports.default = MapboxPhotonGeocoder;
//# sourceMappingURL=mapbox-photon.js.map