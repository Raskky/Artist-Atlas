"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mapbox_gl_1 = require("mapbox-gl");
class PopupManager {
    constructor(map, options = {}) {
        this.marker = null;
        this.map = map;
        this.options = options;
    }
    _createContent(feature) {
        const props = feature.properties;
        if (!props)
            return '';
        let content = '';
        if (props.name) {
            content = props.name;
        }
        const details = [];
        ['housenumber', 'street', 'locality', 'city', 'district', 'state', 'postcode', 'country'].forEach((key) => {
            if (props[key]) {
                details.push(props[key]);
            }
        });
        if (details.length > 0) {
            content += `
        <br>
        ${details.join(',')}
        `;
        }
        return content;
    }
    createContent(feature) {
        return (this.options.createContent)
            ? this.options.createContent(feature)
            : this._createContent(feature);
    }
    add(feature) {
        const popup = new mapbox_gl_1.Popup()
            .setHTML(this.createContent(feature))
            .setMaxWidth('300px');
        if (this.marker) {
            this.marker.remove();
        }
        const lngLat = feature.geometry.coordinates;
        this.marker = new mapbox_gl_1.Marker()
            .setLngLat(lngLat)
            .setPopup(popup)
            .addTo(this.map);
        this.marker.togglePopup();
        let currentZoom = this.map.getZoom();
        const defaultZoom = (this.options.popupZoomLevel) ? this.options.popupZoomLevel : 14;
        if (currentZoom < defaultZoom) {
            currentZoom = defaultZoom;
        }
        this.map.flyTo({
            center: lngLat,
            zoom: currentZoom,
        });
    }
    clear() {
        var _a;
        (_a = this.marker) === null || _a === void 0 ? void 0 : _a.remove();
        this.marker = null;
    }
}
exports.default = PopupManager;
//# sourceMappingURL=popup-manager.js.map