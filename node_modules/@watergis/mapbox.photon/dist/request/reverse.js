"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
class PhotonReverse {
    constructor(options) {
        this.options = {
            url: 'https://photon.komoot.io/reverse?',
            limit: 5,
            osm_tag: undefined,
            lang: undefined,
        };
        if (options) {
            this.options = Object.assign(this.options, options);
        }
    }
    reverse(lon, lat) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.options.url)
                throw new Error('No url');
            const ajax = new base_1.default(this.options.url);
            const options = {
                limit: this.options.limit,
                lat,
                lon,
            };
            if (this.options.osm_tag) {
                options.osm_tag = this.options.osm_tag;
            }
            if (this.options.lang) {
                options.lang = this.options.lang;
            }
            const features = yield ajax.request(options);
            return features;
        });
    }
}
exports.default = PhotonReverse;
//# sourceMappingURL=reverse.js.map